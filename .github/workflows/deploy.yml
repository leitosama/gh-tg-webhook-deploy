name: Deploy Webhook

on:
  workflow_dispatch:
  push:

env:
  YC_SERVICE_ACCOUNT_KEY_FILE: "./key.json"
  TF_VAR_zip_file: "function.zip"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout leitosama/github-telegram-webhook
        uses: actions/checkout@v3
        with:
          repository: 'leitosama/github-telegram-webhook'
          path: github-telegram-webhook

      - name: Prepare zip archive
        run: |
          mv templates/ github-telegram-webhook
          rm -rf github-telegram-webhook/.env.example
          rm -rf github-telegram-webhook/.templates.example
          rm -rf github-telegram-webhook/.git*
      
      - run: zip -r ../${{ env.TF_VAR_zip_file }} ./
        working-directory: ./github-telegram-webhook

      - name: Save key file from Secret
        run: |
          python -c "import os; file = open('${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}', 'w'); file.write(os.environ['KEY_DATA']); file.close()"
        env:
          KEY_DATA: ${{ secrets.YC_SA_KEY }}
  
      - uses: hashicorp/setup-terraform@v2

      - uses: actions/cache@v3
        with:
          path: |
            terraform.tfstate
          key: ${{ runner.os }}-tfstate

      - run: terraform init -no-color

      - name: Terraform plan & apply
        run: |
          terraform plan -no-color -out=tfplan
          terraform apply -no-color -auto-approve tfplan
        env:
          TF_VAR_user_hash: ${{ github.sha }}
          TF_VAR_sa_account_id: ${{ secrets.YC_SA_ACCOUNT_ID }}
          TF_VAR_secret_version_id: ${{ secrets.YC_SECRET_VERSION_ID }}
          TF_VAR_secret_id: ${{ secrets.YC_SECRET_ID }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

      - name: Post-action
        if: always()
        run: |
          rm -rf key.json
          rm -rf function.zip